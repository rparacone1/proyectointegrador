{
	"": [
		"--------------------------------------------------------------------------------------------",
		"Copyright (c) Microsoft Corporation. All rights reserved.",
		"Licensed under the MIT License. See License.txt in the project root for license information.",
		"--------------------------------------------------------------------------------------------",
		"Do not edit this file. It is machine generated."
	],
	"version": "1.0.0",
	"contents": {
		"package": {
			"extension.description": "Node.js debugging support",
			"node.label": "Node.js v6.3+ via Inspector Protocol",
			"node.sourceMaps.description": "Use JavaScript source maps (if they exist).",
			"outDir.deprecationMessage": "Attribute 'outDir' is deprecated, use 'outFiles' instead.",
			"node.outFiles.description": "If source maps are enabled, these glob patterns specify the generated JavaScript files. If a pattern starts with `!` the files are excluded. If not specified, the generated code is expected in the same directory as its source.",
			"node.stopOnEntry.description": "Automatically stop programme after launch.",
			"node.port.description": "Debug port to attach to. Default is 9229.",
			"node.address.description": "TCP/IP address of debug port. Default is 'localhost'.",
			"node.timeout.description": "Retry for this number of milliseconds to connect to Node.js. Default is 10000 ms.",
			"node.smartStep.description": "Automatically step through generated code that cannot be mapped back to the original source.",
			"node.enableSourceMapCaching.description": "When sourcemaps are downloaded from a URL, cache them to disk.",
			"node.diagnosticLogging.description": "When true, the adapter logs its own diagnostic info to the console",
			"node.diagnosticLogging.deprecationMessage": "'diagnosticLogging' is deprecated. Use 'trace' instead.",
			"node.verboseDiagnosticLogging.description": "When true, the adaptor logs all traffic with the client and target (as well as the info logged by 'diagnosticLogging')",
			"node.verboseDiagnosticLogging.deprecationMessage": "'verboseDiagnosticLogging' is deprecated. Use 'trace' instead.",
			"node.trace.description": "When 'true', the debugger will log tracing info to a file. When 'verbose', it will also show logs in the console.",
			"node.sourceMapPathOverrides.description": "A set of mappings for rewriting the locations of source files from what the sourcemap says, to their locations on disk. See README for details.",
			"node.skipFiles.description": "An array of file or folder names, or glob patterns, to skip when debugging.",
			"node.restart.description": "Restart session after Node.js has terminated.",
			"node.showAsyncStacks.description": "Show the async calls that led to the current call stack.",
			"node.disableOptimisticBPs.description": "Don't set breakpoints in any file until a sourcemap has been loaded for that file.",
			"node.launch.program.description": "Absolute path to the program.",
			"node.launch.console.description": "Where to launch the debug target: internal console, integrated terminal, or external terminal.",
			"node.launch.args.description": "Command line arguments passed to the programme.",
			"node.launch.cwd.description": "Absolute path to the working directory of the programme being debugged.",
			"node.launch.runtimeExecutable.description": "Runtime to use. Either an absolute path or the name of a runtime available on the PATH. If ommitted `node` is assumed.",
			"node.launch.runtimeArgs.description": "Optional arguments passed to the runtime executable.",
			"node.launch.env.description": "Environment variables passed to the program. The value `null` removes the variable from the environment.",
			"node.launch.envFile.description": "Absolute path to a file containing environment variable definitions.",
			"node.launch.outputCapture.description": "From where to capture output messages: The debug API, or stdout/stderr streams.",
			"node.launch.config.name": "Launch",
			"node.attach.processId.description": "ID of process to attach to.",
			"node.attach.localRoot.description": "The local source root that corresponds to the 'remoteRoot'.",
			"node.attach.remoteRoot.description": "The source root of the remote host.",
			"node.attach.config.name": "Attach",
			"node.processattach.config.name": "Attach to Process",
			"toggle.skipping.this.file": "Toggle Skipping this File",
			"extensionHost.label": "VS Code Extension Development",
			"extensionHost.launch.runtimeExecutable.description": "Absolute path to VS Code.",
			"extensionHost.launch.stopOnEntry.description": "Automatically stop the extension host after launch.",
			"extensionHost.launch.env.description": "Environment variables passed to the extension host.",
			"extensionHost.snippet.launch.label": "VS Code Extension Development",
			"extensionHost.snippet.launch.description": "Launch a VS Code extension in debug mode",
			"extensionHost.launch.config.name": "Launch Extension"
		},
		"out/src/errors": {
			"VSND2001": "Cannot find runtime '{0}' on PATH. Is '{0}' installed?",
			"VSND2011": "Cannot launch debug target in terminal ({0}).",
			"VSND2017": "Cannot launch debug target ({0}).",
			"VSND2035": "Cannot debug extension ({0}).",
			"VSND2028": "Unknown console type '{0}'.",
			"VSND2002": "Cannot launch program '{0}'; configuring source maps might help.",
			"VSND2003": "Cannot launch program '{0}'; setting the '{1}' attribute might help.",
			"VSND2009": "Cannot launch program '{0}' because corresponding JavaScript cannot be found.",
			"VSND2029": "Can't load environment variables from file ({0})."
		},
		"out/src/nodeDebugAdapter": {
			"attribute.wsl.not.exist": "Cannot find Windows Subsystem for Linux installation.",
			"program.path.case.mismatch.warning": "Program path uses differently cased character as file on disk; this might result in breakpoints not being hit.",
			"node.console.title": "Node Debug Console",
			"attribute.path.not.exist": "Attribute '{0}' does not exist ('{1}').",
			"attribute.path.not.absolute": "Attribute '{0}' is not absolute ('{1}'); consider adding '{2}' as a prefix to make it absolute.",
			"VSND2001": "Cannot find runtime '{0}' on PATH. Make sure to have '{0}' installed.",
			"more.information": "More Information",
			"origin.from.node": "read-only content from Node.js",
			"origin.core.module": "read-only core module"
		},
		"node_modules\\vscode-chrome-debug-core\\out/src/errors": {
			"eval.not.available": "not available",
			"not.connected": "not connected to runtime",
			"restartFrame.cannot": "Can't restart frame",
			"attribute.path.not.exist": "Attribute '{0}' does not exist ('{1}').",
			"attribute.path.not.absolute": "Attribute '{0}' is not absolute ('{1}'); consider adding '{2}' as a prefix to make it absolute.",
			"more.information": "More Information",
			"setVariable.error": "Setting value not supported",
			"source.not.found": "Could not retrieve content.",
			"VSND2010": "Cannot connect to runtime process, timeout after {0} ms - (reason: {1}).",
			"VSND2023": "No call stack available.",
			"failed.to.read.port": "Failed to read file {dataDirPath}, {error}",
			"port.file.contents.invalid": "File at location: \"{dataDirPath}\" did not contain valid port data, contents were: {dataDirContents}"
		},
		"node_modules\\vscode-chrome-debug-core\\out/src/chrome/breakpoints": {
			"setBPTimedOut": "Set breakpoints request timed out",
			"bp.fail.unbound": "Breakpoint set but not yet bound",
			"bp.fail.noscript": "Can't find script for breakpoint request",
			"validateBP.sourcemapFail": "Breakpoint ignored because generated code not found (source map problem?).",
			"validateBP.notFound": "Breakpoint ignored because target path not found",
			"invalidHitCondition": "Invalid hit condition: {0}"
		},
		"node_modules\\vscode-chrome-debug-core\\out/src/chrome/chromeDebugAdapter": {
			"exceptions.all": "All Exceptions",
			"exceptions.uncaught": "Uncaught Exceptions",
			"exceptions.promise_rejects": "Promise Rejects"
		},
		"node_modules\\vscode-chrome-debug-core\\out/src/chrome/chromeTargetDiscoveryStrategy": {
			"attach.responseButNoTargets": "Got a response from the target app, but no target pages found",
			"attach.cannotConnect": "Cannot connect to the target: {0}",
			"attach.invalidResponse": "Response from the target seems invalid. Error: {0}. Response: {1}",
			"attach.invalidResponseArray": "Response from the target seems invalid: {0}",
			"attach.noMatchingTarget": "Can't find a valid target that matches: {0}. Available pages: {1}",
			"attach.devToolsAttached": "Can't attach to this target that may have Chrome DevTools attached: {0}"
		},
		"node_modules\\vscode-chrome-debug-core\\out/src/chrome/stackFrames": {
			"skipReason": "(skipped by '{0}')",
			"scope.exception": "Exception"
		},
		"node_modules\\vscode-chrome-debug-core\\out/src/chrome/stoppedEvent": {
			"reason.description.step": "Paused on step",
			"reason.description.breakpoint": "Paused on breakpoint",
			"reason.description.exception": "Paused on exception",
			"reason.description.uncaughtException": "Paused on uncaught exception",
			"reason.description.caughtException": "Paused on caught exception",
			"reason.description.user_request": "Paused on user request",
			"reason.description.entry": "Paused on entry",
			"reason.description.debugger_statement": "Paused on debugger statement",
			"reason.description.restart": "Paused on frame entry",
			"reason.description.promiseRejection": "Paused on promise rejection"
		},
		"node_modules\\vscode-chrome-debug-core\\out/src/transformers/baseSourceMapTransformer": {
			"origin.inlined.source.map": "read-only inlined content from source map"
		},
		"node_modules\\vscode-chrome-debug-core\\out/src/transformers/remotePathTransformer": {
			"localRootAndRemoteRoot": "Both localRoot and remoteRoot must be specified."
		}
	}
}