{
	"": [
		"--------------------------------------------------------------------------------------------",
		"Copyright (c) Microsoft Corporation. All rights reserved.",
		"Licensed under the MIT License. See License.txt in the project root for license information.",
		"--------------------------------------------------------------------------------------------",
		"Do not edit this file. It is machine generated."
	],
	"version": "1.0.0",
	"contents": {
		"package": {
			"extension.description": "Node.js debugging support (versions < 8.0)",
			"node.label": "Node.js",
			"open.loaded.script": "Open Loaded Script",
			"attach.node.process": "Attach to Node Process",
			"toggle.skipping.this.file": "Toggle Skipping this File",
			"start.with.stop.on.entry": "Start Debugging and Stop on Entry",
			"smartStep.description": "Automatically step through generated code that cannot be mapped back to the original source.",
			"skipFiles.description": "An array of glob patterns for files to skip when debugging. The pattern `<node_internals>/**` matches all internal Node.js modules.",
			"outFiles.description": "If source maps are enabled, these glob patterns specify the generated JavaScript files. If a pattern starts with '!' the files are excluded. If not specified, the generated code is expected in the same directory as its source.  Example: `[\"${workspaceFolder}/out/**/*.js\"]`",
			"outDir.deprecationMessage": "Attribute 'outDir' is deprecated, use 'outFiles' instead.",
			"trace.description": "Produce diagnostic output. Instead of setting this to true you can list one or more selectors separated with commas. The 'verbose' selector enables very detailed output.",
			"launch.args.description": "Command line arguments passed to the programme.",
			"debug.node.showUseWslIsDeprecatedWarning.description": "Controls whether to show a warning when the 'useWSL' attribute is used.",
			"debug.node.useV3.description": "[Experimental] Controls whether to delegate \"node\"-type launch configs to the js-debug extension.",
			"debug.extensionHost.useV3.description": "[Experimental] Controls whether to delegate \"extensionHost\"-type launch configs to the js-debug extension.",
			"node.protocol.description": "Node.js debug protocol to use.",
			"node.protocol.auto.description": "Try to detect the best protocol automatically, selecting 'inspector' for launching Node 8.0+",
			"node.protocol.inspector.description": "New protocol supported by Node.js versions >= 6.3",
			"node.protocol.legacy.description": "Old protocol supported by Node.js versions < 8.0",
			"node.sourceMaps.description": "Use JavaScript source maps (if they exist).",
			"node.stopOnEntry.description": "Automatically stop programme after launch.",
			"node.port.description": "Debug port to attach to. Default is 5858.",
			"node.address.description": "TCP/IP address of process to be debugged (for Node.js >= 5.0 only). Default is 'localhost'.",
			"node.timeout.description": "Retry for this number of milliseconds to connect to Node.js. Default is 10000 ms.",
			"node.restart.description": "Restart session after Node.js has terminated.",
			"node.localRoot.description": "Path to the local directory containing the programme.",
			"node.remoteRoot.description": "Absolute path to the remote directory containing the programme.",
			"node.showAsyncStacks.description": "Show the async calls that led to the current call stack. 'inspector' protocol only.",
			"node.sourceMapPathOverrides.description": "A set of mappings for rewriting the locations of source files from what the sourcemap says, to their locations on disk.",
			"node.disableOptimisticBPs.description": "Don't set breakpoints in any file until a sourcemap has been loaded for that file.",
			"node.launch.program.description": "Absolute path to the programme. Generated value is guessed by looking at package.json and opened files. Edit this attribute.",
			"node.launch.externalConsole.deprecationMessage": "Attribute 'externalConsole' is deprecated, use 'console' instead.",
			"node.launch.console.description": "Where to launch the debug target.",
			"node.launch.console.internalConsole.description": "VS Code Debug Console (which doesn't support to read input from a programme)",
			"node.launch.console.integratedTerminal.description": "VS Code's integrated terminal",
			"node.launch.console.externalTerminal.description": "External terminal that can be configured via user settings",
			"node.launch.cwd.description": "Absolute path to the working directory of the programme being debugged.",
			"node.launch.runtimeExecutable.description": "Runtime to use. Either an absolute path or the name of a runtime available on the PATH. If omitted `node` is assumed.",
			"node.launch.runtimeArgs.description": "Optional arguments passed to the runtime executable.",
			"node.launch.runtimeVersion.description": "Version of `node` runtime to use. Requires `nvm`.",
			"node.launch.env.description": "Environment variables passed to the program. The value `null` removes the variable from the environment.",
			"node.launch.envFile.description": "Absolute path to a file containing environment variable definitions.",
			"node.launch.useWSL.description": "Use Windows Subsystem for Linux.",
			"node.launch.useWSL.deprecation": "'useWSL' is deprecated and support for it will be dropped. Use the 'Remote - WSL' extension instead.",
			"node.launch.outputCapture.description": "Where to capture output messages: The debug API, or stdout/stderr streams.",
			"node.launch.autoAttachChildProcesses.description": "Attach debugger to new child processes automatically.",
			"node.launch.config.name": "Launch",
			"node.attach.processId.description": "ID of process to attach to.",
			"node.attach.config.name": "Attach",
			"node.processattach.config.name": "Attach to Process",
			"node.snippet.launch.label": "Node.js: Launch Programme",
			"node.snippet.launch.description": "Launch a node programme in debug mode",
			"node.snippet.npm.label": "Node.js: Launch via NPM",
			"node.snippet.npm.description": "Launch a node program through an npm `debug` script",
			"node.snippet.attach.label": "Node.js: Attach",
			"node.snippet.attach.description": "Attach to a running node programme",
			"node.snippet.remoteattach.label": "Node.js: Attach to Remote Programme",
			"node.snippet.remoteattach.description": "Attach to the debug port of a remote node programme",
			"node.snippet.attachProcess.label": "Node.js: Attach to Process",
			"node.snippet.attachProcess.description": "Open process picker to select node process to attach to",
			"node.snippet.nodemon.label": "Node.js: Nodemon Setup",
			"node.snippet.nodemon.description": "Use nodemon to relaunch a debug session on source changes",
			"node.snippet.mocha.label": "Node.js: Mocha Tests",
			"node.snippet.mocha.description": "Debug mocha tests",
			"node.snippet.yo.label": "Node.js: Yeoman generator",
			"node.snippet.yo.description": "Debug yeoman generator (install by running `npm link` in project folder)",
			"node.snippet.gulp.label": "Node.js: Gulp task",
			"node.snippet.gulp.description": "Debug gulp task (make sure to have a local gulp installed in your project)",
			"node.snippet.electron.label": "Node.js: Electron Main",
			"node.snippet.electron.description": "Debug the Electron main process"
		},
		"dist/node/nodeDebug": {
			"setVariable.error": "Setting value not supported",
			"exception.paused.promise.rejection": "Paused on Promise Rejection",
			"exception.promise.rejection.text": "Promise Rejection ({0})",
			"exception.promise.rejection": "Promise Rejection",
			"reason.description.step": "Paused on step",
			"reason.description.breakpoint": "Paused on breakpoint",
			"reason.description.exception": "Paused on exception",
			"reason.description.user_request": "Paused on user request",
			"reason.description.entry": "Paused on entry",
			"reason.description.debugger_statement": "Paused on debugger statement",
			"reason.description.restart": "Paused on frame entry",
			"exceptions.all": "All Exceptions",
			"exceptions.uncaught": "Uncaught Exceptions",
			"exceptions.rejects": "Promise Rejects",
			"VSND2028": "Unknown console type '{0}'.",
			"attribute.wls.not.exist": "Cannot find Windows Subsystem Linux installation",
			"VSND2001": "Cannot find runtime '{0}' on PATH. Make sure to have '{0}' installed.",
			"program.path.case.mismatch.warning": "Program path uses differently cased character as file on disk; this might result in breakpoints not being hit.",
			"VSND2002": "Cannot launch program '{0}'; configuring source maps might help.",
			"VSND2009": "Cannot launch program '{0}' because corresponding JavaScript cannot be found.",
			"VSND2003": "Cannot launch program '{0}'; setting the '{1}' attribute might help.",
			"VSND2029": "Can't load environment variables from file ({0}).",
			"node.console.title": "Node Debug Console",
			"VSND2011": "Cannot launch debug target in terminal ({0}).",
			"VSND2017": "Cannot launch debug target ({0}).",
			"VSND2010": "Cannot connect to runtime process (reason: {0}).",
			"VSND2033": "Cannot connect to runtime; make sure that runtime is in 'legacy' debug mode.",
			"VSND2034": "Cannot connect to runtime via 'legacy' protocol; try to use 'inspector' protocol.",
			"file.on.disk.changed": "Unverified because file on disk has changed. Please restart debug session.",
			"VSND2019": "Internal module {0} not found.",
			"sourcemapping.fail.message": "Breakpoint ignored because generated code not found (source map problem?).",
			"VSND2022": "No call stack because program paused outside of JavaScript.",
			"VSND2023": "No call stack available.",
			"VSND2018": "No call stack available ({_command}: {_error}).",
			"origin.from.node": "read-only content from Node.js",
			"origin.from.remote.node": "read-only content from remote Node.js",
			"origin.core.module": "read-only core module",
			"source.skipFiles": "skipped due to 'skipFiles'",
			"source.smartstep": "skipped due to 'smartStep'",
			"origin.inlined.source.map": "read-only inlined content from source map",
			"anonymous.function": "(anonymous function)",
			"scope.local.with.count": "Local ({0} of {1})",
			"scope.unknown": "Unknown Scope Type: {0}",
			"scope.exception": "Exception",
			"eval.not.available": "not available",
			"eval.invalid.expression": "invalid expression: {0}",
			"source.not.found": "Could not retrieve content.",
			"attribute.path.not.exist": "Attribute '{0}' does not exist ('{1}').",
			"attribute.path.not.absolute": "Attribute '{0}' is not absolute ('{1}'); consider adding '{2}' as a prefix to make it absolute.",
			"more.information": "More Information",
			"VSND2015": "Request '{_request}' was cancelled because Node.js is unresponsive.",
			"VSND2016": "Node.js did not respond to request '{_request}' in a reasonable amount of time.",
			"scope.global": "Global",
			"scope.local": "Local",
			"scope.with": "With",
			"scope.closure": "Closure",
			"scope.catch": "Catch",
			"scope.block": "Block",
			"scope.script": "Script"
		},
		"dist/node/nodeV8Protocol": {
			"not.connected": "not connected to runtime",
			"runtime.unresponsive": "cancelled because Node.js is unresponsive",
			"runtime.timeout": "timeout after {0} ms"
		},
		"dist/node/extension/autoAttach": {
			"process.with.pid.label": "Auto attached ({0})"
		},
		"dist/node/extension/cluster": {
			"child.process.with.pid.label": "Child process {0}"
		},
		"dist/node/extension/configurationProvider": {
			"program.not.found.message": "Cannot find a program to debug",
			"useWslDeprecationWarning.title": "Attribute 'useWSL' is deprecated. Please use the 'Remote WSL' extension instead. Click [here]({0}) to learn more.",
			"useWslDeprecationWarning.doNotShowAgain": "Don't Show Again",
			"NVS_HOME.not.found.message": "Attribute 'runtimeVersion' requires Node.js version manager 'nvs'.",
			"NVM_HOME.not.found.message": "Attribute 'runtimeVersion' requires Node.js version manager 'nvm-windows' or 'nvs'.",
			"NVM_DIR.not.found.message": "Attribute 'runtimeVersion' requires Node.js version manager 'nvm' or 'nvs'.",
			"runtime.version.not.found.message": "Node.js version '{0}' not installed for '{1}'.",
			"node.launch.config.name": "Launch Program",
			"mern.starter.explanation": "Launch configuration for '{0}' project created.",
			"program.guessed.from.package.json.explanation": "Launch configuration created based on 'package.json'.",
			"outFiles.explanation": "Adjust glob pattern(s) in the 'outFiles' attribute so that they cover the generated JavaScript."
		},
		"dist/node/extension/processPicker": {
			"pid.error": "Attach to process: cannot put process '{0}' in debug mode.",
			"process.id.error": "Attach to process: '{0}' doesn't look like a process id.",
			"pickNodeProcess": "Pick the node.js process to attach to",
			"process.picker.error": "Process picker failed ({0})",
			"process.id.port": "process id: {0}, debug port: {1}",
			"process.id.port.legacy": "process id: {0}, debug port: {1} (legacy protocol)",
			"process.id.port.signal": "process id: {0}, debug port: {1} ({2})",
			"process.id.signal": "process id: {0} ({1})",
			"cannot.enable.debug.mode.error": "Attach to process: cannot enable debug mode for process '{0}' ({1})."
		},
		"dist/node/extension/protocolDetection": {
			"protocol.switch.legacy.detected": "Debugging with legacy protocol because it was detected.",
			"protocol.switch.unknown.error": "Debugging with inspector protocol because Node.js version could not be determined ({0})",
			"protocol.switch.legacy.version": "Debugging with legacy protocol because Node.js {0} was detected."
		}
	}
}